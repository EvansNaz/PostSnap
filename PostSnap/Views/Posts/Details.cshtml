@model PostSnap.Models.ViewModels.PostDetailsViewModel
@using System.Security.Claims
@using System.Text.Json

@* WE use permission helpers for post and comments for admin and user access in post we have straight method call
    and in comments extra c# code 
    decide later what to choose
*@

@{
    ViewData["Title"] = Model.Post.Title;
    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier); // Get logged-in user's ID

}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-lg rounded">
                <div class="card-body">
                    <h1 class="card-title">@Model.Post.Title</h1>
                    <p class="text-muted">
                        By <strong>@(Model.Post.User?.UserName ?? "Unknown")</strong><br />
                        on @Model.Post.CreatedAt.ToString("MMMM dd, yyyy, h:mm tt")
                        @if (Model.Post.LastModifiedAt.HasValue)
                        {
                            <span class="ms-1 text-muted text-danger-emphasis" title="Edited at @Model.Post.LastModifiedAt.Value.ToString("MMM dd yyyy, h:mm tt")">
                                (edited)
                            </span>
                        }
                    </p>
                    @if (!string.IsNullOrEmpty(@Model.Post.ImageFileName))
                    {
                        <div class="image-container">
                            <a href="/uploads/@Model.Post.ImageFileName" target="_self" data-lightbox="post-gallery" data-title="@Model.Post.Title">

                                <img src="/uploads/@Model.Post.ImageFileName" class="card-img-custom" alt="Post image" />
                            </a>
                        </div>

                    }
                    <hr />
                    <p class="card-text">@Model.Post.Body</p>
                </div>
            </div>
            <div class="container mt-3">
                <div class="d-flex justify-content-between">
                    <a asp-action="Index" class="btn btn-secondary ">Back to Posts</a>
                    @if (PostPermissions.CanEdit(Model.Post, User))
                        
                    {
                        <a asp-action="Edit" asp-route-id="@Model.Post.Id" class="btn btn-warning ms-auto">Edit</a>
                    }
                </div>
            </div>
            <hr />
            <h4 id="comments">Comments</h4>

            @if (Model.Comments != null && Model.Comments.Any())
            {
                <p>(@Model.Comments.TotalItemCount)</p> //Shows total across all pages (IPagedList uses TotalItemCount)
                foreach (var comment in Model.Comments)
                {
                    var canEdit = CommentPermissions.CanEdit(comment, User);
                    var canSoftDelete = CommentPermissions.CanSoftDelete(comment, User);
                    var canHardDelete = CommentPermissions.CanHardDelete(comment, User);
                    var editFormId = $"edit-form-{comment.Id}";
                    var contentDisplayId = $"comment-content-{comment.Id}";
                    var editBtnId = $"edit-btn-{comment.Id}";

                    <div class="border p-2 mb-2 rounded bg-light">
                        <!-- Comment Content Display -->
                        <div id="@contentDisplayId">
                            <p class="mb-1">@comment.Content?.Trim()</p>
                            <small class="text-muted">
                                By <strong>@(comment.User?.UserName ?? "Unknown")</strong>
                                on @comment.CreatedAt.ToString("MMM dd yyyy, h:mm tt")
                                @if (comment.LastModifiedAt.HasValue)
                                {
                                    <span class="ms-1 text-muted" title="Edited at @comment.LastModifiedAt.Value.ToString("MMM dd yyyy, h:mm tt")">
                                        (edited)
                                    </span>
                                }
                            </small>


                        </div>

                        <!-- Edit Button (For owner)-->
                        @if (canEdit)
                        {
                            <button id="edit-btn-@comment.Id" class="btn btn-sm btn-outline-primary mt-1" onclick="toggleEditForm('@comment.Id')">Edit</button>
                        }
                        @if (canHardDelete)
                        {
                            <!-- Hard Delete Icon Button (Admin only) -->
                            <div class="dropdown d-inline ms-2 float-end">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle  mt-1"
                                        type="button"
                                        id="adminDropdown-@comment.Id"
                                        data-bs-toggle="dropdown"
                                        aria-expanded="false">
                                    <i class="bi bi-shield-lock-fill"></i> Admin
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="adminDropdown-@comment.Id">
                                    <li>
                                        <button class="dropdown-item text-danger"
                                                onclick="submitHardDelete(@comment.Id)">
                                            🗑️ Hard Delete
                                        </button>
                                    </li>
                                    <!-- Add more admin options here -->
                                </ul>
                            </div>


                            <form id="hard-delete-form-@comment.Id"
                                  method="post"
                                  asp-controller="Comments"
                                  asp-action="HardDelete"
                                  asp-route-id="@comment.Id"
                                  style="display:none;">
                                @Html.AntiForgeryToken()
                            </form>
                        }

                        <!-- Hidden Edit Form-->
                        @if (canEdit)
                        {
                            <form id="@editFormId" class="mt-2 d-none" method="post" asp-controller="Comments" asp-action="Edit">
                                <input type="hidden" name="PostId" value="@Model.Post.Id" />
                                <input type="hidden" name="CommentId" value="@comment.Id" />

                                <textarea id="edit-textarea-@comment.Id"
                                          name="Content"
                                          class="form-control mb-2"
                                          required
                                          data-original-content="@comment.Content?.Trim()"
                                          oninput="checkIfChanged('@comment.Id')">@comment.Content</textarea>
                                <div class="d-flex gap-2">
                                    <button type="submit" class="btn btn-sm btn-success" disabled>Save</button>
                                    <button type="button" class="btn btn-sm btn-secondary" onclick="toggleEditForm('@comment.Id')">Cancel</button>
                                    <button type="button"
                                            class="btn btn-sm btn-danger"
                                            onclick="submitDelete('@comment.Id')">
                                        Delete
                                    </button>


                                </div>
                            </form>
                            <!-- Delete Form-->
                            <form id="delete-form-@comment.Id"
                                  method="post"
                                  asp-controller="Comments"
                                  asp-action="Delete"
                                  asp-route-id="@comment.Id"
                                  style="display: none;">
                                @Html.AntiForgeryToken()
                            </form>
                        }
                    </div>
                }
                //Pagination
                @await Html.PartialAsync("_Pagination", Model.Comments)

            }
            else
            {
                <p class="text-muted">No comments yet.</p>
            }

            @if (CommentPermissions.IsAuthenticated(User))
            {
                <form asp-controller="Comments" asp-action="Create" method="post">
                    <div class="mb-3">
                        <label for="commentContent" class="form-label">Add a comment:</label>
                        <textarea name="Content" class="form-control" required maxlength="500"></textarea>
                        <input type="hidden" name="PostId" value="@Model.Post.Id" />
                    </div>
                    <button type="submit" class="btn btn-primary">Post Comment</button>
                </form>
            }
            else
            {
                <p><a asp-controller="Account" asp-action="Login">Log in</a> to add a comment.</p>
            }





        </div>
    </div>
</div>
@section Scripts {


    <script>
        // === Comment Edit Script ===
        // This script manages:
        // - Toggle behavior for comment editing UI
        // - Safe edit with original/trimmed content comparison
        // - Confirmation for soft & hard delete operations
        // - jQuery-based DOM access (used throughout the view)



        /**
         * Toggle the visibility of the edit form for a specific comment.
         * Shows/hides form, updates button visibility, resets textarea on cancel.
         */
        function toggleEditForm(commentId) {
            const form = $(`#edit-form-${commentId}`);
            const content = $(`#comment-content-${commentId}`);
            const editBtn = $(`#edit-btn-${commentId}`);
            const textarea = $(`#edit-textarea-${commentId}`); // Get the textarea
            const originalContent = textarea.data("original-content").trim();


            // Check if the form is currently hidden
            if (form.hasClass("d-none")) {
                // If hidden, (show the form), hide the comment content, and hide the Edit button
                form.removeClass("d-none");
                content.hide();
                editBtn.hide();
                // Focus the textarea for editing
                textarea.focus();
            } else {
                // If visible, hide the form, show the comment content, and show the Edit button
                form.addClass("d-none");
                content.show();
                editBtn.show();
                // Reset textarea to original content on cancel
                textarea.val(originalContent);
                checkIfChanged(commentId);// Re-evaluate Save button state

            }
        }

        /**
          * Enable the Save button only if content has actually changed (ignores whitespace differences).
          */
         function checkIfChanged(commentId) {
            const textarea = $(`#edit-textarea-${commentId}`);
            const originalContent = textarea.data("original-content").trim();
            const currentContent = textarea.val().trim();
            const saveBtn = textarea.closest("form").find("button[type='submit']");

            // Only enable Save if trimmed content differs
            saveBtn.prop("disabled", currentContent === originalContent);

        }
        /**
         * Trigger soft delete with confirmation.
         */
        function submitDelete(commentId) {
            if (confirm('Are you sure you want to delete this comment?')) {
                $(`#delete-form-${commentId}`).submit();
            }
        }
        /**
         * Trigger hard delete with admin permission and confirmation.
         */
        function submitHardDelete(commentId) {
            if (confirm('Are you sure you want to permanently delete this comment?')) {
                $(`#hard-delete-form-${commentId}`).submit();
            }
        }


    </script>

}